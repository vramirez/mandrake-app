AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mandrake

  SAM for Mandrake App

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    

Resources:
  LambdaListAll:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mandrake/
      Handler: app.lambda_main
      Runtime: python3.7
      Description: Allows to retrieve all DynamoDB table items thru *scan* method
      MemorySize: 128
      Timeout: 10      
      Events:
        GetApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /getAll
            Method: get
            RestApiId: 
              Ref: MandrakeApi
      Policies: 
        - AmazonDynamoDBFullAccess
          

  
  LambdaPutEvent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: mandrake/
      Handler: app.write_event
      Runtime: python3.7
      Events:
        WriteEvent:
          Type: Api
          Properties:
            Path: /put 
            Method: put
            RestApiId: 
              Ref: MandrakeApi
      Policies:
        - AmazonDynamoDBFullAccess


  LambdaDefault:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: mandrake/
      Handler: app.defoe
      Runtime: python3.7
      Events:
        WriteEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
      Policies:
        - AmazonDynamoDBFullAccess

  MandrakeApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: prod
        DefinitionBody:
            swagger: 2.0
            info:
              title:
                Ref: AWS::StackName
            paths:
              /getAll:
                get:
                  produces:
                    - "application/json"
                  responses:
                   '200':
                     description: "200 response"
                     schema:
                       $ref: "#/definitions/Empty"
                     headers:
                       Access-Control-Allow-Origin:
                         type: "string"                  
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaListAll.Arn}/invocations
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    passthroughBehavior: "when_no_match"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    type: "mock"
              /put:
                put:
                  produces:
                    - "application/json"
                  responses:
                   '200':
                     description: "200 response"
                     schema:
                       $ref: "#/definitions/Empty"
                     headers:
                       Access-Control-Allow-Origin:
                         type: "string"                  
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaPutEvent.Arn}/invocations
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    passthroughBehavior: "when_no_match"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    type: "mock"
            definitions:
              Empty:
                type: "object"
                title: "Empty Schema"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  TheApi:
    Description: "API Gateway endpoint URL for Prod stage for the function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/all/"
  LambdaListAll:
    Description: "Lambda Function ListAll ARN"
    Value: !GetAtt LambdaListAll.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Lambda"
    Value: !GetAtt LambdaListAllRole.Arn
  MandrakeApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref MandrakeApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/prod'